{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww26820\viewh15060\viewkind0
\deftab720
\pard\pardeftab720\sl440\sa240\partightenfactor0

\f0\b\fs37\fsmilli18667 \cf2 \expnd0\expndtw0\kerning0
Programming Assignment-3 - Implementation of Left Recursion Elimination 
\b0\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\fs32 \cf2 AIM:\
To write a program to find whether the given grammar is left recursive or not and eliminate the left recursion .\
PROGRAM CODE:\
#include<stdio.h>\
#include<string.h>\
\
int main()\
\{\
	int n,i,x=0,j=0,y=0,l=0,k,s,flag;\
	char ch;\
	char str[10],new_str[20];\
	char alpha[10][10];\
	char beta[10][10];\
printf("Enter the no of productions: ");\
scanf("%d",&n);\
\
for(i=0;i<n;i++)\
\{	x=y=j=l=0;\
	flag=0;\
	getchar();\
	printf("\\nEnter LHS of production %d: ",i+1);\
	scanf("%c",&ch);\
	printf("\\nEnter RHS of production %d: ",i+1);\
	scanf("%s",str);\
	k=0;\
	while(str[k]!='\\0')\
	\{	\
		if(str[k]==ch)\
		\{	//printf("yes"); exit(1);\
			flag=1; //there's left recursion\
			k++;\
			strcpy(alpha[x],"\\0");\
			//printf("AL%sal",alpha[x]);\
			j=0;\
			while(str[k]!='|' && str[k]!='\\0')\
			\{\
				alpha[x][j]=str[k];\
				//printf("\\n%c",alpha[x][j]);\
				j++;\
				k++;\
			\}\
			alpha[x][j]='\\0';\
			//printf("\\nalpha %d: %s",x+1,alpha[x]); \
			x++;\
			if(str[k]!='\\0')\
				k++;			\
		\}	\
		else\
		\{\
			strcpy(beta[y],"\\0");\
			//printf("\\nhi"); exit(1);\
			l=0;\
			while(str[k]!='|' && str[k]!='\\0')\
			\{\
				beta[y][l]=str[k];\
				//printf("\\n%c",beta[y][l]); // exit(1);\
				l++;\
				k++;\
			\}\
			beta[y][l]='\\0';\
			//printf("\\nbeta %d: %s",y+1,beta[y]); \
			y++;\
			if(str[k]!='\\0')\
				k++;	\
		\}		\
	\}\
	\
	/*printf("\\nno of alpha: %d",x);	\
	for(s=0;s<x;s++)\
		printf("\\nalpha %d: %s",s+1,alpha[s]);\
\
	printf("\\nno of beta: %d",y);	\
	for(s=0;s<y;s++)\
		printf("\\nbeta %d: %s",s+1,beta[s]);*/\
\
	\
\
	if(flag==1)\
	\{\
		printf("\\nThe new productions are: \\n");                                    \
		for(s=0;s<y;s++)  //y--no of beta\
		\{\
			strcpy(new_str,"\\0");\
			strncat(new_str,&ch,1);\
			strcat(new_str,"-->");\
			strcat(new_str,beta[s]);\
			strncat(new_str,&ch,1);\
			strcat(new_str,"'");\
			printf("\\n%s\\n",new_str);\
		\}\
		for(s=0;s<x;s++)		//x--no of alpha\
		\{\
			strcpy(new_str,"\\0");\
			strncat(new_str,&ch,1);\
			strcat(new_str,"'");\
			strcat(new_str,"-->");\
			strcat(new_str,alpha[s]);\
			strncat(new_str,&ch,1);\
			strcat(new_str,"'");\
			printf("\\n%s\\n",new_str);\
		\}\
		if(x>0)\
		\{\
			strcpy(new_str,"\\0");\
			strncat(new_str,&ch,1);\
			strcat(new_str,"'");\
			strcat(new_str,"-->");\
			strcat(new_str,"\uc0\u949 ");\
			printf("\\n%s\\n",new_str);\
		\}\
	\}\
	else if (flag==0) //no left recursion\
	\{\
		printf("\\nNo left recursion\\n");\
	\}\
\}\
\}\
\
OUTPUT:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2020-02-08 at 12.11.44 PM.png \width11760 \height10220
}¬}}